import streamlit as st
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, roc_curve
import matplotlib.pyplot as plt
import seaborn as sns

st.set_page_config(page_title="COVID-19 –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", layout="wide")
st.title("üè• COVID-19 Predictor")
st.markdown("---")

@st.cache_resource
def load_and_train_model(file_path):
    df = pd.read_csv(file_path)

    for col in df.columns:
        if df[col].dtype == 'object':
            df[col] = df[col].map({'Yes': 1, 'No': 0})

    y = df['COVID-19']
    X = df.drop('COVID-19', axis=1)

    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42, stratify=y
    )

    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    model = LogisticRegression(max_iter=1000)
    model.fit(X_train_scaled, y_train)

    y_pred = model.predict(X_test_scaled)
    y_pred_proba = model.predict_proba(X_test_scaled)[:, 1]

    return df, model, scaler, X, X_test, y_test, y_pred, y_pred_proba

uploaded_file = st.sidebar.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª", type=['csv'])

if uploaded_file:
    df, model, scaler, X, X_test, y_test, y_pred, y_pred_proba = load_and_train_model(uploaded_file)

    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "üìä Data Exploration", 
        "üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", 
        "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ–ª–∏", 
        "üìâ –í–ª–∏—è–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤", 
        "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
    ])

    # ========= TAB 1: Data Exploration =========
    with tab1:
        st.header("–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (Data Exploration)")

        st.subheader("–ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞")
        st.dataframe(df.head())

        st.subheader("–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        st.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤: {len(df)}")
        st.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(df.columns)-1} (–±–µ–∑ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π)")
        st.write("–ü—Ä–∏–∑–Ω–∞–∫–∏:")
        st.write(list(X.columns))

        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π COVID-19")
        covid_counts = df['COVID-19'].value_counts()
        st.bar_chart(covid_counts)

        st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        st.write(df.describe())

        st.subheader("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        fig, ax = plt.subplots(figsize=(10,8))
        sns.heatmap(df.corr(), annot=True, cmap='coolwarm', ax=ax)
        st.pyplot(fig, use_container_width=True)

    # ========= TAB 2: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ =========
    with tab2:
        st.header("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞")
        new_patient = {}
        for col in X.columns:
            new_patient[col] = st.selectbox(f"{col}", ["No", "Yes"])
        
        if st.button("üî¨ –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å COVID-19"):
            new_patient_num = {k: 1 if v=="Yes" else 0 for k,v in new_patient.items()}
            new_patient_df = pd.DataFrame([new_patient_num])
            new_patient_scaled = scaler.transform(new_patient_df)
            prediction = model.predict(new_patient_scaled)[0]
            probability = model.predict_proba(new_patient_scaled)[0][1]

            st.metric("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å COVID-19", f"{probability:.1%}")
            st.metric("–î–∏–∞–≥–Ω–æ–∑", "–ó–∞–±–æ–ª–µ–Ω" if prediction==1 else "–ù–µ –∑–∞–±–æ–ª–µ–Ω")
    
    # ========= TAB 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ–ª–∏ =========
    with tab3:
        st.header("–ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏")
        cm = confusion_matrix(y_test, y_pred)
        auc_score = roc_auc_score(y_test, y_pred_proba)
        report = classification_report(y_test, y_pred, output_dict=True, target_names=['–ù–µ –∑–∞–±–æ–ª–µ–Ω', '–ó–∞–±–æ–ª–µ–Ω'])

        col1, col2 = st.columns(2)
        with col1:
            st.metric("Accuracy", f"{report['accuracy']:.3f}")
            st.metric("Precision (–ó–∞–±–æ–ª–µ–Ω)", f"{report['–ó–∞–±–æ–ª–µ–Ω']['precision']:.3f}")
            st.metric("Recall (–ó–∞–±–æ–ª–µ–Ω)", f"{report['–ó–∞–±–æ–ª–µ–Ω']['recall']:.3f}")
            st.metric("F1-Score (–ó–∞–±–æ–ª–µ–Ω)", f"{report['–ó–∞–±–æ–ª–µ–Ω']['f1-score']:.3f}")
            st.metric("ROC-AUC", f"{auc_score:.3f}")
        
        with col2:
            fig, ax = plt.subplots(figsize=(8,6))
            sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
                        xticklabels=['–ù–µ –∑–∞–±–æ–ª–µ–Ω', '–ó–∞–±–æ–ª–µ–Ω'],
                        yticklabels=['–ù–µ –∑–∞–±–æ–ª–µ–Ω', '–ó–∞–±–æ–ª–µ–Ω'], ax=ax)
            ax.set_xlabel("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å")
            ax.set_ylabel("–ò—Å—Ç–∏–Ω–Ω—ã–π –∫–ª–∞—Å—Å")
            ax.set_title("–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫")
            st.pyplot(fig, use_container_width=True)
        
        st.subheader("ROC-–∫—Ä–∏–≤–∞—è")
        fpr, tpr, _ = roc_curve(y_test, y_pred_proba)
        fig, ax = plt.subplots(figsize=(6,3))
        ax.plot(fpr, tpr, label=f'AUC={auc_score:.3f}', linewidth=2)
        ax.plot([0,1],[0,1],'k--')
        ax.set_xlabel("False Positive Rate")
        ax.set_ylabel("True Positive Rate")
        ax.legend()
        st.pyplot(fig, use_container_width=True)

    # ========= TAB 4: –í–ª–∏—è–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ =========
    with tab4:
        st.header("–í–ª–∏—è–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        feature_importance = pd.DataFrame({
            '–ü—Ä–∏–∑–Ω–∞–∫': X.columns,
            '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç': model.coef_[0]
        }).sort_values('–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç', key=abs, ascending=False)

        st.subheader("–¢–æ–ø 10 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        fig, ax = plt.subplots(figsize=(10,6))
        colors = ['red' if x < 0 else 'green' for x in feature_importance['–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç'].head(10)]
        ax.barh(feature_importance['–ü—Ä–∏–∑–Ω–∞–∫'].head(10), feature_importance['–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç'].head(10), color=colors)
        ax.set_xlabel("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç")
        ax.set_title("–í–ª–∏—è–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å COVID-19")
        st.pyplot(fig, use_container_width=True)

    # ========= TAB 5: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è =========
    with tab5:
        st.header("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
        st.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤: {len(X)}")
        st.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(X.columns)}")
        st.write("–ü—Ä–∏–∑–Ω–∞–∫–∏ –º–æ–¥–µ–ª–∏:")
        st.write(list(X.columns))

else:
    st.info("üëà –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")